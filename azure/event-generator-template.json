{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "parameters": {
    "serviceIdentifier": {
      "type": "string",
      "minLength": 4,
      "maxLength": 4
    },
    "environment": {
      "type": "string",
      "defaultValue": "d",
      "allowedValues": [ "d", "t", "p" ]
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "DEV",
      "allowedValues": [ "DEV", "TEST", "OAT", "PROD" ]
    },
    "environmentInstance": {
      "type": "string",
      "minLength": 2,
      "maxLength": 2,
      "defaultValue": "01"
    },
    "sharedResourcesAppName": {
      "type": "string",
      "defaultValue": "common"
    },
    "eapimPublicIpAddress": { "type": "string" },
    "keyVaultInstance": {
      "type": "string",
      "minLength": 2,
      "maxLength": 2,
      "defaultValue": "01"
    },
    "keyVaultSecretNameCdcEventsSubscriptionKey": {
      "type": "string",
      "defaultValue": "cdc-events-subscription-key"
    },
    "keyVaultSecretNameKycloudApiPassword": {
      "type": "string",
      "defaultValue": "kycloud-api-password"
    },
    "keyVaultSecretNameKycloudApiToken": {
      "type": "string",
      "defaultValue": "kycloud-api-token"
    },
    "keyVaultSecretNameCdcEventsTokenRequestPayload": {
      "type": "string",
      "defaultValue": "cdc-events-token-request-payload"
    },
    "keyVaultSecretNameCDC2NotifyAPIKey": {
      "type": "string",
      "defaultValue": "CDC2NotifyAPIKey"
    },
    "cdcEventsApiBaseUri": { "type": "string" },
    "kycloudApiBaseUri": { "type": "string" },
    "kycloudApiEmail": { "type": "string" },
    "loginEndpoint": {
      "type": "string",
      "defaultValue": "user/login"
    },
    "dataPathPrefix": {
      "type": "string",
      "defaultValue": "data"
    },
    "internalOAuthTokenEndpoint": { "type": "string" },
    "appName": {
      "type": "string",
      "defaultValue": "cdcaeg"
    },
    "appInstance": {
      "type": "string",
      "defaultValue": "01"
    }
  },
  "variables": {
    "singleQuote": "'",
    "namePrefix": "[concat(parameters('serviceIdentifier'), parameters('environment'), parameters('environmentInstance'))]",
    "sharedResourceGroupName": "[concat(variables('namePrefix'), '-', parameters('sharedResourcesAppName'))]",
    "keyVaultName": "[concat(variables('namePrefix'), '-kv-', parameters('keyVaultInstance'))]",
    "logicAppName": "[concat(variables('namePrefix'), '-', parameters('appName'), '-la-', parameters('appInstance'))]",
    "logicAppId": "[resourceId('Microsoft.Logic/workflows/', variables('logicAppName'))]",
    "keyVaultSecretCdcEventsSubscriptionKey": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameCdcEventsSubscriptionKey'))]",
    "keyVaultSecretKycloudApiPassword": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameKycloudApiPassword'))]",
    "keyVaultSecretKycloudApiToken": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameKycloudApiToken'))]",
    "keyVaultSecretCdcEventsTokenRequestPayload": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameCdcEventsTokenRequestPayload'))]",
    "keyVaultSecretCDC2NotifyAPIKey": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameCDC2NotifyAPIKey'))]",
    "loginUri": "[concat(parameters('kycloudApiBaseUri'), '/', parameters('loginEndpoint'))]",
    "dataPathUri": "[concat(parameters('kycloudApiBaseUri'), '/', parameters('dataPathPrefix'), '/')]"
  },
  "resources": [
    {
      "apiVersion": "2017-07-01",
      "type": "Microsoft.Logic/workflows",
      "name": "[variables('logicAppName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "environment": "[parameters('environmentName')]",
        "app": "[parameters('appName')]"
      },
      "identity": { "type": "SystemAssigned" },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Init-Control-Attachment-Count": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Attachment-Count",
                    "type": "integer",
                    "value": 0
                  }
                ]
              },
              "runAfter": { "Init-Control-Entity-Completed": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Attachments": {
              "description": "The received collection of attachments to obtain",
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Attachments",
                    "type": "array",
                    "value": []
                  }
                ]
              },
              "runAfter": { "Init-SourceOAUTHToken": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Continue": {
              "description": "Control variable to control continuation within the task following issues",
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Continue",
                    "type": "boolean",
                    "value": "@true"
                  }
                ]
              },
              "runAfter": { "Init-Control-Continue-Step": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Continue-Step": {
              "description": "Control variable to control continuation within a step following issues",
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Continue-Step",
                    "type": "boolean",
                    "value": "@true"
                  }
                ]
              },
              "runAfter": { "Init-Control-Since": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Entity": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Entity",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-Control-Attachments": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Entity-Completed": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Entity-Completed",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              },
              "runAfter": { "Init-Control-Entity": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Error": {
              "description": "A variable used in throw errors to stop processing",
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Error",
                    "type": "integer",
                    "value": 0
                  }
                ]
              },
              "runAfter": { "Init-Control-Status": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Error-Message": {
              "description": "A variable used to describe the current problem",
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Error-Message",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-Control-Error": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-NotifyAPIKey": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-NotifyAPIKey",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-Control-Attachment-Count": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Page": {
              "description": "Control variable to control pagination within an entity download",
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Page",
                    "type": "integer",
                    "value": 1
                  }
                ]
              },
              "runAfter": { "Init-Control-Continue": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Since": {
              "description": "Fundamental control property which controls scope of data delta's received from source",
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Since",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-Control-Started": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Started": {
              "description": "Fundamental control property and key to process control",
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Started",
                    "type": "string",
                    "value": "@{utcNow()}"
                  }
                ]
              },
              "runAfter": { "Init-Control-Error-Message": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-Control-Status": {
              "description": "The task control status recorded in the database by target APIP calls",
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Status",
                    "type": "integer",
                    "value": 1
                  }
                ]
              },
              "runAfter": {},
              "type": "InitializeVariable"
            },
            "Init-SourceOAUTHKey": {
              "description": "The source OAUTH (or not) key",
              "inputs": {
                "variables": [
                  {
                    "name": "SourceOAUTHKey",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-Control-Page": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-SourceOAUTHSecret": {
              "description": "The source OAUTH Secret or password",
              "inputs": {
                "variables": [
                  {
                    "name": "SourceOAUTHSecret",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-SourceOAUTHKey": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-SourceOAUTHToken": {
              "description": "The received source OAUTH token",
              "inputs": {
                "variables": [
                  {
                    "name": "SourceOAUTHToken",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-TargetOAUTHToken": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-TargetOAUTHCredentials": {
              "description": "The target OAUTH Credentials of id and secret",
              "inputs": {
                "variables": [
                  {
                    "name": "TargetOAUTHCredentials",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-TargetOAUTHKey": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-TargetOAUTHKey": {
              "description": "The target OAUTH key",
              "inputs": {
                "variables": [
                  {
                    "name": "TargetOAUTHKey",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-SourceOAUTHSecret": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Init-TargetOAUTHToken": {
              "description": "The received target OAUTH token",
              "inputs": {
                "variables": [
                  {
                    "name": "TargetOAUTHToken",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": { "Init-TargetOAUTHCredentials": [ "Succeeded" ] },
              "type": "InitializeVariable"
            },
            "Scope-Attachments": {
              "actions": {
                "For-Each-Attachment": {
                  "actions": {
                    "Increment-Control-Attachment-Count": {
                      "inputs": {
                        "name": "Control-Attachment-Count",
                        "value": 1
                      },
                      "runAfter": { "Validate-Post-blob": [ "Succeeded" ] },
                      "type": "IncrementVariable"
                    },
                    "Post-blob": {
                      "inputs": {
                        "body": [
                          {
                            "BlobData": "@body('Get-Blob')",
                            "BlobFilename": "@{items('For-Each-Attachment')['BlobKey']}@{items('For-Each-Attachment')['Extension']}",
                            "BlobFolder": "@{items('For-Each-Attachment')['Folder']}",
                            "BlobKey": "@items('For-Each-Attachment')['BlobKey']",
                            "BlobMimeType": "@items('For-Each-Attachment')['MimeType']",
                            "BlobObtained": "@variables('Control-Started')",
                            "BlobShare": "cdcdocuments",
                            "BlobSiteUniqueId": "@items('For-Each-Attachment')?['SiteUniqueId']"
                          }
                        ],
                        "headers": {
                          "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                          "Content-Type": "application/octet-stream",
                          "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                          "X-Run-Identifier": "@variables('Control-Started')"
                        },
                        "method": "POST",
                        "uri": "@{parameters('TargetEndpoint')}blobs"
                      },
                      "runAfter": { "While-Control-Continue-Step-True": [ "Succeeded" ] },
                      "runtimeConfiguration": { "contentTransfer": { "transferMode": "Chunked" } },
                      "type": "Http"
                    },
                    "Re-Authenticate-Attachments": {
                      "actions": {
                        "Scope-Re-Authenticate-Attachments": {
                          "actions": {
                            "Re-Authenticate-Source-Attachment": {
                              "inputs": {
                                "headers": { "Accept": "application/json" },
                                "method": "POST",
                                "queries": {
                                  "ApiToken": "@variables('SourceOAUTHKey')",
                                  "Email": "@parameters('SourceOAUTHId')",
                                  "Password": "@variables('SourceOAUTHSecret')"
                                },
                                "uri": "@parameters('SourceOAUTHEndpoint')"
                              },
                              "runAfter": {},
                              "type": "Http"
                            },
                            "Re-Authenticate-Target-Attachment": {
                              "inputs": {
                                "body": "@variables('TargetOAUTHCredentials')",
                                "headers": { "Content-Type": "application/x-www-form-urlencoded" },
                                "method": "POST",
                                "uri": "@parameters('TargetOAUTHEndpoint')"
                              },
                              "runAfter": { "Validate-Re-Authenticate-Source-Attachment": [ "Succeeded" ] },
                              "type": "Http"
                            },
                            "Validate-Re-Authenticate-Source-Attachment": {
                              "actions": {
                                "Parse-Re-Authenticate-Source-Attachment": {
                                  "inputs": {
                                    "content": "@body('Re-Authenticate-Source-Attachment')",
                                    "schema": {
                                      "properties": {
                                        "SessionId": { "type": "string" },
                                        "Success": { "type": "boolean" }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "runAfter": {},
                                  "type": "ParseJson"
                                },
                                "Validate-Parse-Re-Authenticate-Source-Attachment": {
                                  "actions": {
                                    "Set-SourceOAUTHToken-Again": {
                                      "inputs": {
                                        "name": "SourceOAUTHToken",
                                        "value": "@body('Parse-Re-Authenticate-Source-Attachment')?['SessionId']"
                                      },
                                      "runAfter": {},
                                      "type": "SetVariable"
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set-Parse-Source-OAUTH-Refresh-Fail": {
                                        "description": "Throw error because re login parse of data failed",
                                        "inputs": {
                                          "name": "Control-Error",
                                          "value": "@int('__FAIL__')"
                                        },
                                        "runAfter": { "Set-Parse-Source-OAUTH-Refresh-Fail-Message": [ "Succeeded" ] },
                                        "type": "SetVariable"
                                      },
                                      "Set-Parse-Source-OAUTH-Refresh-Fail-Message": {
                                        "inputs": {
                                          "name": "Control-Error-Message",
                                          "value": "Failed to parse the source login token."
                                        },
                                        "runAfter": {},
                                        "type": "SetVariable"
                                      }
                                    }
                                  },
                                  "expression": { "and": [ { "equals": [ "@body('Parse-Re-Authenticate-Source-Attachment')?['Success']", "@true" ] } ] },
                                  "runAfter": { "Parse-Re-Authenticate-Source-Attachment": [ "Succeeded" ] },
                                  "type": "If"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Set-Re-Authenticate-Source-Attachment-Fail": {
                                    "description": "Throw and error because the re login failed with bad http status",
                                    "inputs": {
                                      "name": "Control-Error",
                                      "value": "@int('__ERROR__')"
                                    },
                                    "runAfter": { "Set-Re-Authenticate-Source-Attachment-Fail-Message": [ "Succeeded" ] },
                                    "type": "SetVariable"
                                  },
                                  "Set-Re-Authenticate-Source-Attachment-Fail-Message": {
                                    "inputs": {
                                      "name": "Control-Error-Message",
                                      "value": "Failed to re-authenticate with the source API for attachments"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                  }
                                }
                              },
                              "expression": { "and": [ { "equals": [ "@outputs('Re-Authenticate-Source-Attachment')['statusCode']", 200 ] } ] },
                              "runAfter": { "Re-Authenticate-Source-Attachment": [ "Succeeded" ] },
                              "type": "If"
                            },
                            "Validate-Re-Authenticate-Target-Attachment": {
                              "actions": {
                                "Parse-Re-Authenticate-Target-Attachment": {
                                  "inputs": {
                                    "content": "@body('Re-Authenticate-Target-Attachment')",
                                    "schema": {
                                      "properties": { "access_token": { "type": "string" } },
                                      "type": "object"
                                    }
                                  },
                                  "runAfter": {},
                                  "type": "ParseJson"
                                },
                                "Set-Re-Authenticate-Target-Attachment": {
                                  "inputs": {
                                    "name": "TargetOAUTHToken",
                                    "value": "@body('Parse-Re-Authenticate-Target-Attachment')?['access_token']"
                                  },
                                  "runAfter": { "Parse-Re-Authenticate-Target-Attachment": [ "Succeeded" ] },
                                  "type": "SetVariable"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Set-Re-Authenticate-Target-Attachment-Fail": {
                                    "inputs": {
                                      "name": "Control-Error",
                                      "value": "@int('__ERROR__')"
                                    },
                                    "runAfter": { "Set-Re-Authenticate-Target-Attachment-Fail-Message": [ "Succeeded" ] },
                                    "type": "SetVariable"
                                  },
                                  "Set-Re-Authenticate-Target-Attachment-Fail-Message": {
                                    "inputs": {
                                      "name": "Control-Error-Message",
                                      "value": "Failed to re-authenticate target for attachment "
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                  }
                                }
                              },
                              "expression": { "and": [ { "equals": [ "@outputs('Re-Authenticate-Target-Attachment')['statusCode']", 200 ] } ] },
                              "runAfter": { "Re-Authenticate-Target-Attachment": [ "Succeeded" ] },
                              "type": "If"
                            }
                          },
                          "runAfter": {},
                          "type": "Scope"
                        }
                      },
                      "description": "Re-Authenticate again at start and every x attachments.",
                      "expression": { "and": [ { "equals": [ "@mod(variables('Control-Attachment-Count'),parameters('ReAuthenticateEvery'))", 0 ] } ] },
                      "runAfter": {},
                      "type": "If"
                    },
                    "Validate-Post-blob": {
                      "actions": {},
                      "else": {
                        "actions": {
                          "Scope-Attachments-Fail-Post-To-Target": {
                            "description": "Throw error to exit scope and fail run - should really check for 401 and attempt re login to target",
                            "inputs": {
                              "name": "Control-Error",
                              "value": "@int('__ERROR_')"
                            },
                            "runAfter": { "Set_variable": [ "Succeeded" ] },
                            "type": "SetVariable"
                          },
                          "Set_variable": {
                            "inputs": {
                              "name": "Control-Error-Message",
                              "value": "Failed to post blob data"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                          }
                        }
                      },
                      "expression": { "and": [ { "equals": [ "@outputs('Post-blob')['statusCode']", 202 ] } ] },
                      "runAfter": { "Post-blob": [ "Succeeded" ] },
                      "type": "If"
                    },
                    "While-Control-Continue-Step-True": {
                      "actions": {
                        "Get-Blob": {
                          "inputs": {
                            "headers": { "Accept": "*/*" },
                            "method": "GET",
                            "queries": {
                              "AsAtachment": "true",
                              "AsAttachment": "true",
                              "BlobKey": "@{items('For-Each-Attachment')['BlobKey']}",
                              "SessionId": "@variables('SourceOAUTHToken')"
                            },
                            "uri": "@{parameters('SourceEndpoint')}blobs"
                          },
                          "runAfter": {},
                          "type": "Http"
                        },
                        "Validate-Get-Blob": {
                          "actions": {},
                          "else": {
                            "actions": {
                              "If-Unauthorised": {
                                "actions": {
                                  "Get-Blob-Reauthenticate": {
                                    "inputs": {
                                      "headers": { "Accept": "application/json" },
                                      "method": "POST",
                                      "queries": {
                                        "ApiToken": "@variables('SourceOAUTHToken')",
                                        "Email": "@parameters('KycloudApiEmail')",
                                        "Password": "@variables('SourceOAUTHSecret')"
                                      },
                                      "uri": "@parameters('SourceOAUTHEndpoint')"
                                    },
                                    "runAfter": {},
                                    "type": "Http"
                                  },
                                  "Validate-Get-Blob-Reauthenticate": {
                                    "actions": {
                                      "Parse-Get-Blob-Reauthenticate": {
                                        "inputs": {
                                          "content": "@body('Get-Blob-Reauthenticate')",
                                          "schema": {
                                            "properties": {
                                              "SessionId": { "type": "string" },
                                              "Success": { "type": "boolean" }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "runAfter": {},
                                        "type": "ParseJson"
                                      },
                                      "Set-Get-Blob-Reauthenticate": {
                                        "inputs": {
                                          "name": "SourceOAUTHToken",
                                          "value": "@body('Parse-Get-Blob-Reauthenticate')?['SessionId']"
                                        },
                                        "runAfter": { "Parse-Get-Blob-Reauthenticate": [ "Succeeded" ] },
                                        "type": "SetVariable"
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set-Get-Blob-Reauthenticate-Fail": {
                                          "inputs": {
                                            "name": "Control-Error",
                                            "value": "@int('__ERROR__')"
                                          },
                                          "runAfter": { "Set-Get-Blob-Reauthenticate-Fail-Message": [ "Succeeded" ] },
                                          "type": "SetVariable"
                                        },
                                        "Set-Get-Blob-Reauthenticate-Fail-Message": {
                                          "inputs": {
                                            "name": "Control-Error-Message",
                                            "value": "Failed to re-authenticate with source API."
                                          },
                                          "runAfter": {},
                                          "type": "SetVariable"
                                        }
                                      }
                                    },
                                    "expression": { "and": [ { "equals": [ "@outputs('Get-Blob-Reauthenticate')['statusCode']", 200 ] } ] },
                                    "runAfter": { "Get-Blob-Reauthenticate": [ "Succeeded" ] },
                                    "type": "If"
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set-Scope-Attachments-Fail": {
                                      "inputs": {
                                        "name": "Control-Error",
                                        "value": "@int('__EROR__')"
                                      },
                                      "runAfter": { "Set-Scope-Attachments-Fail-Message": [ "Succeeded" ] },
                                      "type": "SetVariable"
                                    },
                                    "Set-Scope-Attachments-Fail-Message": {
                                      "inputs": {
                                        "name": "Control-Error-Message",
                                        "value": "Failed attempting to obtain attachment data."
                                      },
                                      "runAfter": {},
                                      "type": "SetVariable"
                                    }
                                  }
                                },
                                "expression": { "and": [ { "equals": [ "@outputs('Get-Blob')['statusCode']", 401 ] } ] },
                                "runAfter": {},
                                "type": "If"
                              }
                            }
                          },
                          "expression": { "and": [ { "equals": [ "@outputs('Get-Blob')['statusCode']", 200 ] } ] },
                          "runAfter": { "Get-Blob": [ "Succeeded" ] },
                          "type": "If"
                        }
                      },
                      "expression": { "and": [ { "equals": [ "@variables('Control-Continue-Step')", "@true" ] } ] },
                      "runAfter": { "Re-Authenticate-Attachments": [ "Succeeded" ] },
                      "type": "If"
                    }
                  },
                  "foreach": "@variables('Control-Attachments')",
                  "runAfter": {},
                  "runtimeConfiguration": { "concurrency": { "repetitions": 1 } },
                  "type": "Foreach"
                }
              },
              "description": "Obtain all of the attachments on the list and post the data and metadata to the blobs endpoint to store the file and update the database.",
              "runAfter": { "Scope-Attachments-List": [ "Succeeded" ] },
              "type": "Scope"
            },
            "Scope-Attachments-List": {
              "actions": {
                "Get-Attachments-List": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')"
                    },
                    "method": "GET",
                    "uri": "@{parameters('TargetEndpoint')}attachments"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "Validate-Scope-Attachments-List": {
                  "actions": {
                    "Parse-Attachments-List": {
                      "inputs": {
                        "content": "@body('Get-Attachments-List')",
                        "schema": {
                          "items": {
                            "properties": {
                              "BlobKey": { "type": "string" },
                              "Extension": { "type": "string" },
                              "Folder": { "type": "string" },
                              "MimeType": { "type": "string" },
                              "SiteUniqueId": { "type": "string" }
                            },
                            "required": [ "BlobKey", "MimeType", "Extension", "Folder", "SiteUniqueId" ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "runAfter": {},
                      "type": "ParseJson"
                    },
                    "Set-Control-Attachments-List": {
                      "inputs": {
                        "name": "Control-Attachments",
                        "value": "@body('Parse-Attachments-List')"
                      },
                      "runAfter": { "Parse-Attachments-List": [ "Succeeded" ] },
                      "type": "SetVariable"
                    }
                  },
                  "else": {
                    "actions": {
                      "Set-Scope-Attachments-List-Fail": {
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__ERROR__')"
                        },
                        "runAfter": { "Set-Scope-Attachments-List-Fail-Message": [ "Succeeded" ] },
                        "type": "SetVariable"
                      },
                      "Set-Scope-Attachments-List-Fail-Message": {
                        "inputs": {
                          "name": "Control-Error-Message",
                          "value": "Failed to get the attachments list to downlaod attachment files."
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": { "and": [ { "equals": [ "@outputs('Get-Attachments-List')['statusCode']", 200 ] } ] },
                  "runAfter": { "Get-Attachments-List": [ "Succeeded" ] },
                  "type": "If"
                }
              },
              "runAfter": { "Scope-Update-Status-Extract": [ "Succeeded" ] },
              "type": "Scope"
            },
            "Scope-Entities": {
              "actions": {
                "For-Each-Entity": {
                  "actions": {
                    "Scope-Re-Authenticate": {
                      "actions": {
                        "Re-Authenticate-Source": {
                          "description": "Sign in to the source authentication endpoint and get a new token",
                          "inputs": {
                            "headers": { "Accept": "application/json" },
                            "method": "POST",
                            "queries": {
                              "ApiToken": "@variables('SourceOAUTHKey')",
                              "Email": "@parameters('SourceOAUTHId')",
                              "Password": "@variables('SourceOAUTHSecret')"
                            },
                            "uri": "@parameters('SourceOAUTHEndpoint')"
                          },
                          "runAfter": {},
                          "type": "Http"
                        },
                        "Re-Authenticate-Target": {
                          "description": "Sign into the target endpoint",
                          "inputs": {
                            "body": "@variables('TargetOAUTHCredentials')",
                            "headers": { "Content-Type": "application/x-www-form-urlencoded" },
                            "method": "POST",
                            "uri": "@parameters('TargetOAUTHEndpoint')"
                          },
                          "runAfter": { "Validate-Re-Authenticate-Source": [ "Succeeded" ] },
                          "type": "Http"
                        },
                        "Validate-Re-Authenticate-Source": {
                          "actions": {
                            "Parse-Re-Authenticate-Source": {
                              "inputs": {
                                "content": "@body('Re-Authenticate-Source')",
                                "schema": {
                                  "properties": {
                                    "SessionId": { "type": "string" },
                                    "Success": { "type": "boolean" }
                                  },
                                  "type": "object"
                                }
                              },
                              "runAfter": {},
                              "type": "ParseJson"
                            },
                            "Set-Re-Authenticate-Source": {
                              "inputs": {
                                "name": "SourceOAUTHToken",
                                "value": "@body('Parse-Re-Authenticate-Source')?['SessionId']"
                              },
                              "runAfter": { "Parse-Re-Authenticate-Source": [ "Succeeded" ] },
                              "type": "SetVariable"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set-Re-Authenticate-Source-Fail": {
                                "inputs": {
                                  "name": "Control-Error",
                                  "value": "@int('__ERROR__')"
                                },
                                "runAfter": { "Set-Re-Authenticate-Source-Fail-Message": [ "Succeeded" ] },
                                "type": "SetVariable"
                              },
                              "Set-Re-Authenticate-Source-Fail-Message": {
                                "inputs": {
                                  "name": "Control-Error-Message",
                                  "value": "Failed to re-authenticate the source endpoint."
                                },
                                "runAfter": {},
                                "type": "SetVariable"
                              }
                            }
                          },
                          "expression": { "and": [ { "equals": [ "@outputs('Re-Authenticate-Source')['statusCode']", 200 ] } ] },
                          "runAfter": { "Re-Authenticate-Source": [ "Succeeded" ] },
                          "type": "If"
                        },
                        "Validate-Re-Authenticate-Target": {
                          "actions": {
                            "Parse-Re-Authenticate-Target": {
                              "inputs": {
                                "content": "@body('Re-Authenticate-Target')",
                                "schema": {
                                  "properties": { "access_token": { "type": "string" } },
                                  "type": "object"
                                }
                              },
                              "runAfter": {},
                              "type": "ParseJson"
                            },
                            "Set-Re-Authenticate-Target": {
                              "inputs": {
                                "name": "TargetOAUTHToken",
                                "value": "@body('Parse-Re-Authenticate-Target')?['access_token']"
                              },
                              "runAfter": { "Parse-Re-Authenticate-Target": [ "Succeeded" ] },
                              "type": "SetVariable"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set-Re-Authenticate-Target-Fail": {
                                "inputs": {
                                  "name": "Control-Error",
                                  "value": "@int('__ERROR__')"
                                },
                                "runAfter": { "Set-Re-Authenticate-Target-Faile-Message": [ "Succeeded" ] },
                                "type": "SetVariable"
                              },
                              "Set-Re-Authenticate-Target-Faile-Message": {
                                "inputs": {
                                  "name": "Control-Error-Message",
                                  "value": "Failed to re-authenticate target endpoint."
                                },
                                "runAfter": {},
                                "type": "SetVariable"
                              }
                            }
                          },
                          "expression": { "and": [ { "equals": [ "@outputs('Re-Authenticate-Target')['statusCode']", 200 ] } ] },
                          "runAfter": { "Re-Authenticate-Target": [ "Succeeded" ] },
                          "type": "If"
                        }
                      },
                      "description": "This copes with the potential expiration of OAUTH tokens at either end point.",
                      "runAfter": { "Set-Control-Entity": [ "Succeeded" ] },
                      "type": "Scope"
                    },
                    "Set-Control-Entity": {
                      "inputs": {
                        "name": "Control-Entity",
                        "value": "@{items('For-Each-Entity')}"
                      },
                      "runAfter": {},
                      "type": "SetVariable"
                    },
                    "Until-Control-Entity-Completed": {
                      "actions": {
                        "For-Each-Page": {
                          "actions": {
                            "Get-Entity-Page": {
                              "description": "Call the entity endpoint and ask for as much as it will allow",
                              "inputs": {
                                "headers": { "Accept": "application/json" },
                                "method": "GET",
                                "queries": {
                                  "Page": "@{variables('Control-Page')}",
                                  "PageSize": "1000",
                                  "SessionId": "@variables('SourceOAUTHToken')",
                                  "UpdatedSince": "@variables('Control-Since')",
                                  "format": "json",
                                  "jsconfig": "dh:iso8601"
                                },
                                "retryPolicy": { "type": "none" },
                                "uri": "@{parameters('SourceEndpoint')}@{variables('Control-Entity')}"
                              },
                              "runAfter": {},
                              "type": "Http"
                            },
                            "Validate-Get-Entity-Page": {
                              "actions": {
                                "Increment-Control-Page": {
                                  "inputs": {
                                    "name": "Control-Page",
                                    "value": 1
                                  },
                                  "runAfter": { "Parse-Entity-Page": [ "Succeeded" ] },
                                  "type": "IncrementVariable"
                                },
                                "Parse-Entity-Page": {
                                  "inputs": {
                                    "content": "@body('Get-Entity-Page')",
                                    "schema": {
                                      "properties": {
                                        "Infos": {
                                          "items": { "type": "object" },
                                          "type": "array"
                                        },
                                        "Success": { "type": "boolean" }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "runAfter": {},
                                  "type": "ParseJson"
                                },
                                "Validate-Get-Entity-Data": {
                                  "actions": {
                                    "Post-Entity-Page": {
                                      "description": "Post the received entities to the target API",
                                      "inputs": {
                                        "body": "@body('Parse-Entity-Page')?['Infos']",
                                        "headers": {
                                          "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                                          "Content-Type": "application/octet-stream",
                                          "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                                          "X-Page": "@{variables('Control-Page')}",
                                          "X-Run-Identifier": "@variables('Control-Started')"
                                        },
                                        "method": "POST",
                                        "retryPolicy": { "type": "none" },
                                        "uri": "@{parameters('TargetEndpoint')}@{variables('Control-Entity')}"
                                      },
                                      "runAfter": {},
                                      "type": "Http"
                                    },
                                    "Validate-Post-Entity-Page": {
                                      "actions": {},
                                      "description": "Check the call worked",
                                      "else": {
                                        "actions": {
                                          "Set-Post-Entity-Page-Fail": {
                                            "inputs": {
                                              "name": "Control-Error",
                                              "value": "@int('__ERROR__')"
                                            },
                                            "runAfter": { "Set-Post-Entity-Page-Fail-Message": [ "Succeeded" ] },
                                            "type": "SetVariable"
                                          },
                                          "Set-Post-Entity-Page-Fail-Message": {
                                            "inputs": {
                                              "name": "Control-Error-Message",
                                              "value": "Failed posting entities (@{items('For-Each-Entity')}) to Target API."
                                            },
                                            "runAfter": {},
                                            "type": "SetVariable"
                                          }
                                        }
                                      },
                                      "expression": { "and": [ { "equals": [ "@outputs('Post-Entity-Page')['statusCode']", 202 ] } ] },
                                      "runAfter": { "Post-Entity-Page": [ "Succeeded" ] },
                                      "type": "If"
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set-Control-Continue-False": {
                                        "description": "As there are no more entity members we stop processing this entity",
                                        "inputs": {
                                          "name": "Control-Continue",
                                          "value": "@false"
                                        },
                                        "runAfter": {},
                                        "type": "SetVariable"
                                      },
                                      "Set-Control-Entity-Completed-True": {
                                        "description": "And ask for the next one",
                                        "inputs": {
                                          "name": "Control-Entity-Completed",
                                          "value": "@true"
                                        },
                                        "runAfter": { "Set-Control-Continue-False": [ "Succeeded" ] },
                                        "type": "SetVariable"
                                      }
                                    }
                                  },
                                  "expression": { "and": [ { "greater": [ "@length(body('Parse-Entity-Page')['Infos'])", 0 ] } ] },
                                  "runAfter": { "Increment-Control-Page": [ "Succeeded" ] },
                                  "type": "If"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Set-Validate-Get-Entity-Page-Fail": {
                                    "inputs": {
                                      "name": "Control-Error",
                                      "value": "@int('__ERROR__')"
                                    },
                                    "runAfter": { "Set-Validate-Get-Entity-Page-Fail-Message": [ "Succeeded" ] },
                                    "type": "SetVariable"
                                  },
                                  "Set-Validate-Get-Entity-Page-Fail-Message": {
                                    "inputs": {
                                      "name": "Control-Error-Message",
                                      "value": "Un-recoverable status on getting @{variables('Control-Entity')} Page@{variables('Control-Page')}"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                  }
                                }
                              },
                              "expression": { "and": [ { "equals": [ "@outputs('Get-Entity-Page')['statusCode']", 200 ] } ] },
                              "runAfter": { "Get-Entity-Page": [ "Succeeded" ] },
                              "type": "If"
                            }
                          },
                          "description": "Process the entity's pages",
                          "expression": "@equals(variables('Control-Continue'), false)",
                          "limit": {
                            "count": 5000,
                            "timeout": "PT1H"
                          },
                          "runAfter": { "Set-Control-Continue-True": [ "Succeeded" ] },
                          "type": "Until"
                        },
                        "Set-Control-Continue-True": {
                          "inputs": {
                            "name": "Control-Continue",
                            "value": "@true"
                          },
                          "runAfter": { "Set-Control-Page-1": [ "Succeeded" ] },
                          "type": "SetVariable"
                        },
                        "Set-Control-Page-1": {
                          "inputs": {
                            "name": "Control-Page",
                            "value": 1
                          },
                          "runAfter": {},
                          "type": "SetVariable"
                        }
                      },
                      "expression": "@equals(variables('Control-Entity-Completed'), true)",
                      "limit": {
                        "count": 4,
                        "timeout": "PT1H"
                      },
                      "runAfter": { "Scope-Re-Authenticate": [ "Succeeded" ] },
                      "type": "Until"
                    }
                  },
                  "description": "Process the entities list",
                  "foreach": "@parameters('SourceEntities')",
                  "runAfter": {},
                  "runtimeConfiguration": { "concurrency": { "repetitions": 1 } },
                  "type": "Foreach"
                }
              },
              "description": "Download all of the entities which we have not yet had changes for.",
              "runAfter": { "Scope-Update-Status-Entities": [ "Succeeded" ] },
              "type": "Scope"
            },
            "Scope-Get-Secrets": {
              "actions": {
                "Get-SourceOAUTHKey": {
                  "inputs": {
                    "authentication": {
                      "audience": "@parameters('SecretsAudience')",
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "GET",
                    "uri": "@parameters('SourceOAUTHKeyUri')"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "Get-SourceOAUTHSecret": {
                  "inputs": {
                    "authentication": {
                      "audience": "@parameters('SecretsAudience')",
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "GET",
                    "uri": "@parameters('SourceOAUTHSecretUri')"
                  },
                  "runAfter": { "Set-SourceOAUTHKey": [ "Succeeded" ] },
                  "type": "Http"
                },
                "Get-TargetOAUTHCredentials": {
                  "inputs": {
                    "authentication": {
                      "audience": "@parameters('SecretsAudience')",
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "GET",
                    "uri": "@parameters('TargetOAUTHCredentialsUri')"
                  },
                  "runAfter": { "Set-TargetOAUTHKey": [ "Succeeded" ] },
                  "type": "Http"
                },
                "Get-TargetOAUTHKey": {
                  "inputs": {
                    "authentication": {
                      "audience": "@parameters('SecretsAudience')",
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "GET",
                    "uri": "@parameters('TargetOAUTHKeyUri')"
                  },
                  "runAfter": { "Set-SourceOAUTHSecret": [ "Succeeded" ] },
                  "type": "Http"
                },
                "Parse-SourceOAUTHKey": {
                  "inputs": {
                    "content": "@body('Get-SourceOAUTHKey')",
                    "schema": {
                      "properties": { "value": { "type": "string" } },
                      "type": "object"
                    }
                  },
                  "runAfter": { "Get-SourceOAUTHKey": [ "Succeeded" ] },
                  "type": "ParseJson"
                },
                "Parse-SourceOAUTHSecret": {
                  "inputs": {
                    "content": "@body('Get-SourceOAUTHSecret')",
                    "schema": {
                      "properties": { "value": { "type": "string" } },
                      "type": "object"
                    }
                  },
                  "runAfter": { "Get-SourceOAUTHSecret": [ "Succeeded" ] },
                  "type": "ParseJson"
                },
                "Parse-TargetOAUTHCredentials": {
                  "inputs": {
                    "content": "@body('Get-TargetOAUTHCredentials')",
                    "schema": {
                      "properties": { "value": { "type": "string" } },
                      "type": "object"
                    }
                  },
                  "runAfter": { "Get-TargetOAUTHCredentials": [ "Succeeded" ] },
                  "type": "ParseJson"
                },
                "Parse-TargetOAUTHKey": {
                  "inputs": {
                    "content": "@body('Get-TargetOAUTHKey')",
                    "schema": {
                      "properties": { "value": { "type": "string" } },
                      "type": "object"
                    }
                  },
                  "runAfter": { "Get-TargetOAUTHKey": [ "Succeeded" ] },
                  "type": "ParseJson"
                },
                "Set-SourceOAUTHKey": {
                  "inputs": {
                    "name": "SourceOAUTHKey",
                    "value": "@body('Parse-SourceOAUTHKey')?['value']"
                  },
                  "runAfter": { "Parse-SourceOAUTHKey": [ "Succeeded" ] },
                  "type": "SetVariable"
                },
                "Set-SourceOAUTHSecret": {
                  "inputs": {
                    "name": "SourceOAUTHSecret",
                    "value": "@body('Parse-SourceOAUTHSecret')?['value']"
                  },
                  "runAfter": { "Parse-SourceOAUTHSecret": [ "Succeeded" ] },
                  "type": "SetVariable"
                },
                "Set-TargetOAUTHCredentials": {
                  "inputs": {
                    "name": "TargetOAUTHCredentials",
                    "value": "@body('Parse-TargetOAUTHCredentials')?['value']"
                  },
                  "runAfter": { "Parse-TargetOAUTHCredentials": [ "Succeeded" ] },
                  "type": "SetVariable"
                },
                "Set-TargetOAUTHKey": {
                  "inputs": {
                    "name": "TargetOAUTHKey",
                    "value": "@body('Parse-TargetOAUTHKey')?['value']"
                  },
                  "runAfter": { "Parse-TargetOAUTHKey": [ "Succeeded" ] },
                  "type": "SetVariable"
                },
                "Validate-Secrets": {
                  "actions": {},
                  "else": {
                    "actions": {
                      "Scope-Get-Secrets-Fail": {
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__ERROR__')"
                        },
                        "runAfter": { "Scope-Get-Secrets-Fail-Message": [ "Succeeded" ] },
                        "type": "SetVariable"
                      },
                      "Scope-Get-Secrets-Fail-Message": {
                        "inputs": {
                          "name": "Control-Error-Message",
                          "value": "Unable to obtain required Secrets"
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      { "not": { "equals": [ "@variables('SourceOAUTHKey')", "@null" ] } },
                      { "not": { "equals": [ "@variables('SourceOAUTHSecret')", "" ] } },
                      { "not": { "equals": [ "@variables('TargetOAUTHKey')", "" ] } },
                      { "not": { "equals": [ "@variables('TargetOAUTHCredentials')", "" ] } }
                    ]
                  },
                  "runAfter": { "Set-TargetOAUTHCredentials": [ "Succeeded" ] },
                  "type": "If"
                }
              },
              "runAfter": { "Init-Control-NotifyAPIKey": [ "Succeeded" ] },
              "type": "Scope"
            },
            "Scope-Report": {
              "actions": {
                "Validate-Scope-Report": {
                  "actions": {
                    "Record-Control-Status-Report": {
                      "description": "Record the final status that marks this task as completed.",
                      "inputs": {
                        "headers": {
                          "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                          "Content-Type": "application/json",
                          "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                          "X-Run-Identifier": "@variables('Control-Started')",
                          "X-Run-Status": "@{variables('Control-Status')}"
                        },
                        "method": "PUT",
                        "uri": "@parameters('TargetControlEndpoint')"
                      },
                      "runAfter": {},
                      "type": "Http"
                    },
                    "Validate-Record-Control-Status-Report": {
                      "actions": {
                        "Success": {
                          "inputs": { "runStatus": "Succeeded" },
                          "runAfter": {},
                          "type": "Terminate"
                        }
                      },
                      "else": {
                        "actions": {
                          "Record-Control-Status-Report-Failed": {
                            "inputs": {
                              "runError": {
                                "code": "1",
                                "message": "Failed to record success."
                              },
                              "runStatus": "Failed"
                            },
                            "runAfter": {},
                            "type": "Terminate"
                          }
                        }
                      },
                      "expression": { "and": [ { "equals": [ "@outputs('Record-Control-Status-Report')['statusCode']", 202 ] } ] },
                      "runAfter": { "Record-Control-Status-Report": [ "Succeeded", "Failed", "TimedOut" ] },
                      "type": "If"
                    }
                  },
                  "else": {
                    "actions": {
                      "Fail": {
                        "inputs": {
                          "runError": {
                            "code": "1",
                            "message": "Termianted after failure: @{variables('Control-Error-Message')}"
                          },
                          "runStatus": "Failed"
                        },
                        "runAfter": {},
                        "type": "Terminate"
                      }
                    }
                  },
                  "expression": { "and": [ { "equals": [ "@variables('Control-Status')", "@parameters('StatusReporting')" ] } ] },
                  "runAfter": {},
                  "type": "If"
                }
              },
              "description": "To send notification via email on results of the run.",
              "runAfter": { "Scope-Update-Status-Transform": [ "Succeeded", "TimedOut", "Skipped", "Failed" ] },
              "type": "Scope"
            },
            "Scope-Start-Status": {
              "actions": {
                "Record-Control-Status-Start": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')"
                    },
                    "method": "POST",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "Validate-Scope-Start-Status": {
                  "actions": {
                    "Set-Control-Since": {
                      "description": "Set the Since date and time according to the returned value of the last successful run",
                      "inputs": {
                        "name": "Control-Since",
                        "value": "@{outputs('Record-Control-Status-Start')['headers']?['X-Run-Since']}"
                      },
                      "runAfter": { "Set-Control-Started": [ "Succeeded" ] },
                      "type": "SetVariable"
                    },
                    "Set-Control-Started": {
                      "description": "Set the started date and time using the returned value to get SQL adjusted milliseconds",
                      "inputs": {
                        "name": "Control-Started",
                        "value": "@{outputs('Record-Control-Status-Start')['headers']?['X-Run-Identifier']}"
                      },
                      "runAfter": {},
                      "type": "SetVariable"
                    }
                  },
                  "else": {
                    "actions": {
                      "Set-Scope-Start-Status-Fail": {
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__ERROR__')"
                        },
                        "runAfter": { "Set-Scope-Start-Status-Fail-Message": [ "Succeeded" ] },
                        "type": "SetVariable"
                      },
                      "Set-Scope-Start-Status-Fail-Message": {
                        "inputs": {
                          "name": "Control-Error-Message",
                          "value": "Failed to record the process start"
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": { "and": [ { "equals": [ "@outputs('Record-Control-Status-Start')['statusCode']", 201 ] } ] },
                  "runAfter": { "Record-Control-Status-Start": [ "Succeeded" ] },
                  "type": "If"
                }
              },
              "runAfter": { "Scope-Target-OAUTH": [ "Succeeded" ] },
              "type": "Scope"
            },
            "Scope-Target-OAUTH": {
              "actions": {
                "Get-TargetOAUTHToken": {
                  "inputs": {
                    "body": "@variables('TargetOAUTHCredentials')",
                    "headers": { "Content-Type": "application/x-www-form-urlencoded" },
                    "method": "POST",
                    "uri": "@parameters('TargetOAUTHEndpoint')"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "Validate-Scope-Target-OAUTH": {
                  "actions": {
                    "Parse-TargetOAUTHToken": {
                      "inputs": {
                        "content": "@body('Get-TargetOAUTHToken')",
                        "schema": {
                          "properties": { "access_token": { "type": "string" } },
                          "type": "object"
                        }
                      },
                      "runAfter": {},
                      "type": "ParseJson"
                    },
                    "Set-TargetOAUTHToken": {
                      "inputs": {
                        "name": "TargetOAUTHToken",
                        "value": "@body('Parse-TargetOAUTHToken')?['access_token']"
                      },
                      "runAfter": { "Parse-TargetOAUTHToken": [ "Succeeded" ] },
                      "type": "SetVariable"
                    }
                  },
                  "description": "Check that the status code is correct",
                  "else": {
                    "actions": {
                      "Set-Scope-Target-OAUTH-Fail": {
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__ERROR__')"
                        },
                        "runAfter": { "Set-Scope-Target-OAUTH-Fail-Message": [ "Succeeded" ] },
                        "type": "SetVariable"
                      },
                      "Set-Scope-Target-OAUTH-Fail-Message": {
                        "inputs": {
                          "name": "Control-Error-Message",
                          "value": "Target OAUTH Failed"
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": { "and": [ { "equals": [ "@outputs('Get-TargetOAUTHToken')['statusCode']", 200 ] } ] },
                  "runAfter": { "Get-TargetOAUTHToken": [ "Succeeded" ] },
                  "type": "If"
                }
              },
              "description": "Connect up to azure and get a target authorisation token",
              "runAfter": { "Scope-Get-Secrets": [ "Succeeded" ] },
              "type": "Scope"
            },
            "Scope-Update-Status-Entities": {
              "actions": {
                "Record-Control-Status-Entities": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')",
                      "X-Run-Status": "@{variables('Control-Status')}"
                    },
                    "method": "PATCH",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": { "Set-Control-Status-Entities": [ "Succeeded" ] },
                  "type": "Http"
                },
                "Set-Control-Status-Entities": {
                  "inputs": {
                    "name": "Control-Status",
                    "value": "@parameters('StatusEntities')"
                  },
                  "runAfter": {},
                  "type": "SetVariable"
                },
                "Validate-Scope-Update-Status-Entities": {
                  "actions": {},
                  "else": {
                    "actions": {
                      "Set-Scope-Update-Status-Entities-Fail": {
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__ERROR__')"
                        },
                        "runAfter": { "Set-Scope-Update-Status-Entities-Fail-Message": [ "Succeeded" ] },
                        "type": "SetVariable"
                      },
                      "Set-Scope-Update-Status-Entities-Fail-Message": {
                        "inputs": {
                          "name": "Control-Error-Message",
                          "value": "Failed to record task prgress to Entities"
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": { "and": [ { "equals": [ "@outputs('Record-Control-Status-Entities')['statusCode']", 202 ] } ] },
                  "runAfter": { "Record-Control-Status-Entities": [ "Succeeded" ] },
                  "type": "If"
                }
              },
              "runAfter": { "Scope-Start-Status": [ "Succeeded" ] },
              "type": "Scope"
            },
            "Scope-Update-Status-Extract": {
              "actions": {
                "Record-Control-Status-Extract": {
                  "description": "This will trigger the extract process inside the database via stored procedures",
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')",
                      "X-Run-Status": "@{variables('Control-Status')}"
                    },
                    "method": "PUT",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": { "Set-Control-Status-Extract": [ "Succeeded" ] },
                  "type": "Http"
                },
                "Set-Control-Status-Extract": {
                  "inputs": {
                    "name": "Control-Status",
                    "value": "@parameters('StatusExtracting')"
                  },
                  "runAfter": {},
                  "type": "SetVariable"
                },
                "Validate-Scope-Update-Status-Extract": {
                  "actions": {},
                  "else": {
                    "actions": {
                      "Set-Scope-Update-Status-Extract-Fail": {
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__ERROR__')"
                        },
                        "runAfter": { "Set-Scope-Update-Status-Extract-Fail-Message": [ "Succeeded" ] },
                        "type": "SetVariable"
                      },
                      "Set-Scope-Update-Status-Extract-Fail-Message": {
                        "inputs": {
                          "name": "Control-Error-Message",
                          "value": "Failed to record task progress status to extract."
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": { "and": [ { "equals": [ "@outputs('Record-Control-Status-Extract')['statusCode']", 202 ] } ] },
                  "runAfter": { "Record-Control-Status-Extract": [ "Succeeded" ] },
                  "type": "If"
                }
              },
              "runAfter": { "Scope-Entities": [ "Succeeded" ] },
              "type": "Scope"
            },
            "Scope-Update-Status-Transform": {
              "actions": {
                "Record-Control-Status-Transform": {
                  "description": "This will trigger the final transform process inside the database via stored procedures",
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')",
                      "X-Run-Status": "@{variables('Control-Status')}"
                    },
                    "method": "PUT",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": { "Set-Control-Status-Transform": [ "Succeeded" ] },
                  "type": "Http"
                },
                "Set-Control-Status-Transform": {
                  "inputs": {
                    "name": "Control-Status",
                    "value": "@parameters('StatusTransforming')"
                  },
                  "runAfter": {},
                  "type": "SetVariable"
                },
                "Validate-Scope-Update-Status-Transform": {
                  "actions": {
                    "Set-Control-Status-Report-Success": {
                      "inputs": {
                        "name": "Control-Status",
                        "value": "@parameters('StatusReporting')"
                      },
                      "runAfter": {},
                      "type": "SetVariable"
                    }
                  },
                  "else": {
                    "actions": {
                      "Scope-Update-Status-Transform-Fail": {
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__ERROR__')"
                        },
                        "runAfter": { "Scope-Update-Status-Transform-Fail-Message": [ "Succeeded" ] },
                        "type": "SetVariable"
                      },
                      "Scope-Update-Status-Transform-Fail-Message": {
                        "inputs": {
                          "name": "Control-Error-Message",
                          "value": "Failed to record status as Transforming."
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": { "and": [ { "equals": [ "@outputs('Record-Control-Status-Transform')['statusCode']", 202 ] } ] },
                  "runAfter": { "Record-Control-Status-Transform": [ "Succeeded" ] },
                  "type": "If"
                }
              },
              "description": "Trigger the transformation of the changes",
              "runAfter": { "Scope-Attachments": [ "Succeeded" ] },
              "type": "Scope"
            }
          },
          "contentVersion": "1.0.0.0",
          "parameters": {
            "CDC2NotifyAPIKeySecretUri": {
              "defaultValue": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameCDC2NotifyAPIKey'))]",
              "type": "String"
            },
            "NotifyFailureAddresses": {
              "defaultValue": "iain.stevenson@education.gov.uk",
              "type": "String"
            },
            "NotifySuccessAddresses": {
              "defaultValue": "jake.wood@education.gov.uk",
              "type": "String"
            },
            "NotifyUri": {
              "defaultValue": "https://dev-api-customerengagement.platform.education.gov.uk/notifications/email",
              "type": "String"
            },
            "ReAuthenticateEvery": {
              "defaultValue": 25,
              "type": "Int"
            },
            "SecretsAudience": {
              "defaultValue": "https://vault.azure.net",
              "type": "String"
            },
            "SourceEndpoint": {
              "defaultValue": "[variables('dataPathUri')]",
              "type": "String"
            },
            "SourceEntities": {
              "defaultValue": [ "users", "portfolios", "sites", "surveys", "surveysections", "surveysectionelements", "deleted" ],
              "type": "Array"
            },
            "SourceOAUTHEndpoint": {
              "defaultValue": "[variables('loginUri')]",
              "type": "String"
            },
            "SourceOAUTHId": {
              "defaultValue": "[parameters('kycloudApiEmail')]",
              "type": "String"
            },
            "SourceOAUTHKeyUri": {
              "defaultValue": "[concat(reference(variables('keyVaultSecretKycloudApiToken'), '2019-09-01').secretUriWithVersion, '?api-version=2016-10-01')]",
              "type": "String"
            },
            "SourceOAUTHSecretUri": {
              "defaultValue": "[concat(reference(variables('keyVaultSecretKycloudApiPassword'), '2019-09-01').secretUriWithVersion, '?api-version=2016-10-01')]",
              "type": "String"
            },
            "StatusAttachments": {
              "defaultValue": 5,
              "type": "Int"
            },
            "StatusEntities": {
              "defaultValue": 3,
              "type": "Int"
            },
            "StatusExtracting": {
              "defaultValue": 4,
              "type": "Int"
            },
            "StatusReporting": {
              "defaultValue": 100,
              "type": "Int"
            },
            "StatusStart": {
              "defaultValue": 1,
              "type": "Int"
            },
            "StatusTransforming": {
              "defaultValue": 6,
              "type": "Int"
            },
            "TargetControlEndpoint": {
              "defaultValue": "[concat(parameters('cdcEventsApiBaseUri'), '/load')]",
              "type": "String"
            },
            "TargetEndpoint": {
              "defaultValue": "[concat(parameters('cdcEventsApiBaseUri'), '/')]",
              "type": "String"
            },
            "TargetOAUTHCredentialsUri": {
              "defaultValue": "[concat(reference(variables('keyVaultSecretCdcEventsTokenRequestPayload'), '2019-09-01').secretUriWithVersion, '?api-version=2016-10-01')]",
              "type": "String"
            },
            "TargetOAUTHEndpoint": {
              "defaultValue": "[parameters('internalOAuthTokenEndpoint')]",
              "type": "String"
            },
            "TargetOAUTHKeyUri": {
              "defaultValue": "[concat(reference(variables('keyVaultSecretCdcEventsSubscriptionKey'), '2019-09-01').secretUriWithVersion, '?api-version=2016-10-01')]",
              "type": "String"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Day",
                "interval": 1,
                "schedule": { "hours": [ "0" ] }
              },
              "type": "Recurrence"
            }
          }
        },
        "parameters": {}
      }
    }
  ],
  "outputs": {
    "logicAppPrincipalId": {
      "value": "[reference(variables('logicAppId'), '2019-05-01', 'Full').identity.principalId]",
      "type": "string"
    }
  },
  "contentVersion": "1.0.0.0"
}
