{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "parameters": {
    "serviceIdentifier": {
      "type": "string",
      "minLength": 4,
      "maxLength": 4
    },
    "environment": {
      "type": "string",
      "defaultValue": "d",
      "allowedValues": [
        "d",
        "t",
        "p"
      ]
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "DEV",
      "allowedValues": [
        "DEV",
        "TEST",
        "OAT",
        "PROD"
      ]
    },
    "environmentInstance": {
      "type": "string",
      "minLength": 2,
      "maxLength": 2,
      "defaultValue": "01"
    },
    "sharedResourcesAppName": {
      "type": "string",
      "defaultValue": "common"
    },
    "eapimPublicIpAddress": {
      "type": "string"
    },
    "keyVaultInstance": {
      "type": "string",
      "minLength": 2,
      "maxLength": 2,
      "defaultValue": "01"
    },
    "keyVaultSecretNameCdcEventsSubscriptionKey": {
      "type": "string",
      "defaultValue": "cdc-events-subscription-key"
    },
    "keyVaultSecretNameKycloudApiPassword": {
      "type": "string",
      "defaultValue": "kycloud-api-password"
    },
    "keyVaultSecretNameKycloudApiToken": {
      "type": "string",
      "defaultValue": "kycloud-api-token"
    },
    "keyVaultSecretNameCdcEventsTokenRequestPayload": {
      "type": "string",
      "defaultValue": "cdc-events-token-request-payload"
    },
    "cdcEventsApiBaseUri": {
      "type": "string"
    },
    "kycloudApiBaseUri": {
      "type": "string"
    },
    "kycloudApiEmail": {
      "type": "string"
    },
    "loginEndpoint": {
      "type": "string",
      "defaultValue": "user/login"
    },
    "dataPathPrefix": {
      "type": "string",
      "defaultValue": "data"
    },
    "internalOAuthTokenEndpoint": {
      "type": "string"
    },
    "appName": {
      "type": "string",
      "defaultValue": "cdcaeg"
    },
    "appInstance": {
      "type": "string",
      "defaultValue": "01"
    }
  },
  "variables": {
    "singleQuote": "'",
    "namePrefix": "[concat(parameters('serviceIdentifier'), parameters('environment'), parameters('environmentInstance'))]",
    "sharedResourceGroupName": "[concat(variables('namePrefix'), '-', parameters('sharedResourcesAppName'))]",
    "keyVaultName": "[concat(variables('namePrefix'), '-kv-', parameters('keyVaultInstance'))]",
    "logicAppName": "[concat(variables('namePrefix'), '-', parameters('appName'), '-la-', parameters('appInstance'))]",
    "logicAppId": "[resourceId('Microsoft.Logic/workflows/', variables('logicAppName'))]",
    "keyVaultSecretCdcEventsSubscriptionKey": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameCdcEventsSubscriptionKey'))]",
    "keyVaultSecretKycloudApiPassword": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameKycloudApiPassword'))]",
    "keyVaultSecretKycloudApiToken": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameKycloudApiToken'))]",
    "keyVaultSecretCdcEventsTokenRequestPayload": "[resourceId(variables('sharedResourceGroupName'), 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('keyVaultSecretNameCdcEventsTokenRequestPayload'))]",
    "loginUri": "[concat(parameters('kycloudApiBaseUri'), '/', parameters('loginEndpoint'))]",
    "dataPathUri": "[concat(parameters('kycloudApiBaseUri'), '/', parameters('dataPathPrefix'))]"
  },
  "resources": [
    {
      "apiVersion": "2017-07-01",
      "type": "Microsoft.Logic/workflows",
      "name": "[variables('logicAppName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "environment": "[parameters('environmentName')]",
        "app": "[parameters('appName')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Init-Control-Attachments": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Attachments",
                    "type": "array",
                    "value": []
                  }
                ]
              },
              "runAfter": {
                "Init-SourceOAUTHToken": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-Control-Continue": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Continue",
                    "type": "boolean",
                    "value": "@true"
                  }
                ]
              },
              "runAfter": {
                "Init-Control-Continue-Step": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-Control-Continue-Step": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Continue-Step",
                    "type": "boolean",
                    "value": "@true"
                  }
                ]
              },
              "runAfter": {
                "Init-Control-Since": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-Control-Error": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Error",
                    "type": "integer",
                    "value": 0
                  }
                ]
              },
              "runAfter": {
                "Init-Control-Status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-Control-Page": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Page",
                    "type": "integer",
                    "value": 1
                  }
                ]
              },
              "runAfter": {
                "Init-Control-Continue": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-Control-Since": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Since",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": {
                "Init-Control-Started": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-Control-Started": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Started",
                    "type": "string",
                    "value": "@{utcNow()}"
                  }
                ]
              },
              "runAfter": {
                "Init-Control-Error": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-Control-Status": {
              "inputs": {
                "variables": [
                  {
                    "name": "Control-Status",
                    "type": "integer",
                    "value": 1
                  }
                ]
              },
              "runAfter": {},
              "type": "InitializeVariable"
            },
            "Init-SourceOAUTHKey": {
              "inputs": {
                "variables": [
                  {
                    "name": "SourceOAUTHKey",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": {
                "Init-Control-Page": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-SourceOAUTHSecret": {
              "inputs": {
                "variables": [
                  {
                    "name": "SourceOAUTHSecret",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": {
                "Init-SourceOAUTHKey": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-SourceOAUTHToken": {
              "inputs": {
                "variables": [
                  {
                    "name": "SourceOAUTHToken",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": {
                "Init-TargetOAUTHToken": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-TargetOAUTHCredentials": {
              "inputs": {
                "variables": [
                  {
                    "name": "TargetOAUTHCredentials",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": {
                "Init-TargetOAUTHKey": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-TargetOAUTHKey": {
              "inputs": {
                "variables": [
                  {
                    "name": "TargetOAUTHKey",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": {
                "Init-SourceOAUTHSecret": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Init-TargetOAUTHToken": {
              "inputs": {
                "variables": [
                  {
                    "name": "TargetOAUTHToken",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              },
              "runAfter": {
                "Init-TargetOAUTHCredentials": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Scope-Attachments": {
              "actions": {
                "For_each_attachment": {
                  "actions": {
                    "If-Post-Blob-Success": {
                      "actions": {},
                      "else": {
                        "actions": {
                          "Scope-Attachments-Fail-Post-To-Target": {
                            "description": "Throw error to exit scope and fail run - should really check for 401 and attempt re login to target",
                            "inputs": {
                              "name": "Control-Error",
                              "value": "@int('__ERROR_')"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Post-blob')['statusCode']",
                              202
                            ]
                          }
                        ]
                      },
                      "runAfter": {
                        "Post-blob": [
                          "Succeeded"
                        ]
                      },
                      "type": "If"
                    },
                    "Post-blob": {
                      "inputs": {
                        "body": [
                          {
                            "BlobData": "@body('Get-Blob')",
                            "BlobFilename": "@{items('For_each_attachment')['BlobKey']}@{items('For_each_attachment')['Extension']}",
                            "BlobFolder": "@{items('For_each_attachment')['Folder']}",
                            "BlobKey": "@items('For_each_attachment')['BlobKey']",
                            "BlobMimeType": "@items('For_each_attachment')['MimeType']",
                            "BlobObtained": "@variables('Control-Started')",
                            "BlobShare": "cdcdocuments",
                            "BlobSiteUniqueId": "@items('For_each_attachment')?['SiteUniqueId']"
                          }
                        ],
                        "headers": {
                          "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                          "Content-Type": "application/octet-stream",
                          "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                          "X-Run-Identifier": "@variables('Control-Started')"
                        },
                        "method": "POST",
                        "uri": "@{parameters('TargetEndpoint')}blobs"
                      },
                      "runAfter": {
                        "While-Control-Continue-Step-True": [
                          "Succeeded"
                        ]
                      },
                      "runtimeConfiguration": {
                        "contentTransfer": {
                          "transferMode": "Chunked"
                        }
                      },
                      "type": "Http"
                    },
                    "While-Control-Continue-Step-True": {
                      "actions": {
                        "Get-Blob": {
                          "inputs": {
                            "headers": {
                              "Accept": "*/*"
                            },
                            "method": "GET",
                            "queries": {
                              "AsAtachment": "true",
                              "AsAttachment": "true",
                              "BlobKey": "@items('For_each_attachment')['BlobKey']",
                              "SessionId": "@variables('SourceOAUTHToken')"
                            },
                            "uri": "@{parameters('SourceEndpoint')}blobs"
                          },
                          "runAfter": {},
                          "type": "Http"
                        },
                        "If-Get-Blob-Success": {
                          "actions": {},
                          "else": {
                            "actions": {
                              "If-Unauthorised": {
                                "actions": {
                                  "Parse_relogin_after_401": {
                                    "inputs": {
                                      "content": "@body('Re_login_after_401')",
                                      "schema": {
                                        "properties": {
                                          "SessionId": {
                                            "type": "string"
                                          },
                                          "Success": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "runAfter": {
                                      "Re_login_after_401": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ParseJson"
                                  },
                                  "Re_login_after_401": {
                                    "inputs": {
                                      "headers": {
                                        "Accept": "application/json"
                                      },
                                      "method": "POST",
                                      "queries": {
                                        "ApiToken": "@variables('SourceOAUTHToken')",
                                        "Email": "@parameters('KycloudApiEmail')",
                                        "Password": "@variables('SourceOAUTHSecret')"
                                      },
                                      "uri": "@parameters('SourceOAUTHEndpoint')"
                                    },
                                    "runAfter": {},
                                    "type": "Http"
                                  },
                                  "Set_AttachementsSessionId_after_relogin_after_401": {
                                    "inputs": {
                                      "name": "SourceOAUTHToken",
                                      "value": "@body('Parse_relogin_after_401')?['SessionId']"
                                    },
                                    "runAfter": {
                                      "Parse_relogin_after_401": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable"
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set-Control-Continue-Step-False": {
                                      "inputs": {
                                        "name": "Control-Continue-Step",
                                        "value": "@false"
                                      },
                                      "runAfter": {},
                                      "type": "SetVariable"
                                    },
                                    "Set-Control-Error-Get-Blob-Error": {
                                      "inputs": {
                                        "name": "Control-Error",
                                        "value": "@int('__EROR__')"
                                      },
                                      "runAfter": {
                                        "Set-Control-Continue-Step-False": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "runAfter": {},
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Get-Blob')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "runAfter": {
                            "Get-Blob": [
                              "Succeeded"
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('Control-Continue-Step')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "runAfter": {},
                      "type": "If"
                    }
                  },
                  "foreach": "@variables('Control-Attachments')",
                  "runAfter": {},
                  "type": "Foreach"
                }
              },
              "description": "Obtain all of the attachments on the list and post the data and metadata to the blobs endpoint to store the file and update the database.",
              "runAfter": {
                "Scope-Source-OAUTH-Refresh": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Attachments-List": {
              "actions": {
                "Get-Attachments-List": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')"
                    },
                    "method": "GET",
                    "uri": "@{parameters('TargetEndpoint')}attachments"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "Parse-Attachments-List": {
                  "inputs": {
                    "content": "@body('Get-Attachments-List')",
                    "schema": {
                      "items": {
                        "properties": {
                          "BlobKey": {
                            "type": "string"
                          },
                          "Extension": {
                            "type": "string"
                          },
                          "Folder": {
                            "type": "string"
                          },
                          "MimeType": {
                            "type": "string"
                          },
                          "SiteUniqueId": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "BlobKey",
                          "MimeType",
                          "Extension",
                          "Folder",
                          "SiteUniqueId"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "runAfter": {
                    "Get-Attachments-List": [
                      "Succeeded"
                    ]
                  },
                  "type": "ParseJson"
                },
                "Set-Control-Attachments-List": {
                  "inputs": {
                    "name": "Control-Attachments",
                    "value": "@body('Parse-Attachments-List')"
                  },
                  "runAfter": {
                    "Parse-Attachments-List": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                }
              },
              "runAfter": {
                "Scope-Update-Status-Extract": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Entities": {
              "actions": {
                "For_each_ApiEntitiesToPull": {
                  "actions": {
                    "Loop_through_pages": {
                      "actions": {
                        "Get-Entity-Page": {
                          "inputs": {
                            "headers": {
                              "Accept": "application/json"
                            },
                            "method": "GET",
                            "queries": {
                              "Page": "@{variables('Control-Page')}",
                              "PageSize": "1000",
                              "SessionId": "@variables('SourceOAUTHToken')",
                              "UpdatedSince": "@variables('Control-Since')",
                              "format": "json",
                              "jsconfig": "dh:iso8601"
                            },
                            "retryPolicy": {
                              "type": "none"
                            },
                            "uri": "@{parameters('SourceEndpoint')}@{items('For_each_ApiEntitiesToPull')}"
                          },
                          "runAfter": {},
                          "type": "Http"
                        },
                        "If-Entities-Received": {
                          "actions": {
                            "Post-Entity-Page": {
                              "inputs": {
                                "body": "@body('Parse-Entity-Page')?['Infos']",
                                "headers": {
                                  "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                                  "Content-Type": "application/octet-stream",
                                  "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                                  "X-Page": "@{variables('Control-Page')}",
                                  "X-Run-Identifier": "@variables('Control-Started')"
                                },
                                "method": "POST",
                                "retryPolicy": {
                                  "type": "none"
                                },
                                "uri": "@{parameters('TargetEndpoint')}@{items('For_each_ApiEntitiesToPull')}"
                              },
                              "runAfter": {},
                              "type": "Http"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set-Control-Continue-False": {
                                "inputs": {
                                  "name": "Control-Continue",
                                  "value": "@false"
                                },
                                "runAfter": {},
                                "type": "SetVariable"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(body('Parse-Entity-Page')['Infos'])",
                                  0
                                ]
                              }
                            ]
                          },
                          "runAfter": {
                            "Increment-Control-Page": [
                              "Succeeded"
                            ]
                          },
                          "type": "If"
                        },
                        "Increment-Control-Page": {
                          "inputs": {
                            "name": "Control-Page",
                            "value": 1
                          },
                          "runAfter": {
                            "Parse-Entity-Page": [
                              "Succeeded"
                            ]
                          },
                          "type": "IncrementVariable"
                        },
                        "Parse-Entity-Page": {
                          "inputs": {
                            "content": "@body('Get-Entity-Page')",
                            "schema": {
                              "properties": {
                                "Infos": {
                                  "items": {
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "Success": {
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "runAfter": {
                            "Get-Entity-Page": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson"
                        }
                      },
                      "expression": "@equals(variables('Control-Continue'), false)",
                      "limit": {
                        "count": 5000,
                        "timeout": "PT1H"
                      },
                      "runAfter": {
                        "Set-Control-Page-1": [
                          "Succeeded"
                        ]
                      },
                      "type": "Until"
                    },
                    "Set-Control-Continue-True": {
                      "inputs": {
                        "name": "Control-Continue",
                        "value": "@true"
                      },
                      "runAfter": {},
                      "type": "SetVariable"
                    },
                    "Set-Control-Page-1": {
                      "inputs": {
                        "name": "Control-Page",
                        "value": 1
                      },
                      "runAfter": {
                        "Set-Control-Continue-True": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    }
                  },
                  "foreach": "@parameters('SourceEntities')",
                  "runAfter": {},
                  "runtimeConfiguration": {
                    "concurrency": {
                      "repetitions": 1
                    }
                  },
                  "type": "Foreach"
                }
              },
              "runAfter": {
                "Scope-Update-Status-Entities": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Get-Secrets": {
              "actions": {
                "Get_cdc-events-subscription-key": {
                  "inputs": {
                    "authentication": {
                      "audience": "@parameters('SecretsAudience')",
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "GET",
                    "uri": "@parameters('TargetOAUTHKeyUri')"
                  },
                  "runAfter": {
                    "Set-SourceOAUTHSecret": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Get_cdc-events-token-request-payload": {
                  "inputs": {
                    "authentication": {
                      "audience": "@parameters('SecretsAudience')",
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "GET",
                    "uri": "@parameters('TargetOAUTHCredentialsUri')"
                  },
                  "runAfter": {
                    "Set-TargetOAUTHKey": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Get_kycloud-api-password_from_KeyVault": {
                  "inputs": {
                    "authentication": {
                      "audience": "@parameters('SecretsAudience')",
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "GET",
                    "uri": "@parameters('SourceOAUTHSecretUri')"
                  },
                  "runAfter": {
                    "Set-SourceOAUTHKey": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Get_kycloud-api-token_from_KeyVault": {
                  "inputs": {
                    "authentication": {
                      "audience": "@parameters('SecretsAudience')",
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "GET",
                    "uri": "@parameters('SourceOAUTHKeyUri')"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "Parse_cdc-events-subscription-key": {
                  "inputs": {
                    "content": "@body('Get_cdc-events-subscription-key')",
                    "schema": {
                      "properties": {
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "runAfter": {
                    "Get_cdc-events-subscription-key": [
                      "Succeeded"
                    ]
                  },
                  "type": "ParseJson"
                },
                "Parse_cdc-events-token-request-payload": {
                  "inputs": {
                    "content": "@body('Get_cdc-events-token-request-payload')",
                    "schema": {
                      "properties": {
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "runAfter": {
                    "Get_cdc-events-token-request-payload": [
                      "Succeeded"
                    ]
                  },
                  "type": "ParseJson"
                },
                "Parse_kycloud-api-password": {
                  "inputs": {
                    "content": "@body('Get_kycloud-api-password_from_KeyVault')",
                    "schema": {
                      "properties": {
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "runAfter": {
                    "Get_kycloud-api-password_from_KeyVault": [
                      "Succeeded"
                    ]
                  },
                  "type": "ParseJson"
                },
                "Parse_kycloud-api-token": {
                  "inputs": {
                    "content": "@body('Get_kycloud-api-token_from_KeyVault')",
                    "schema": {
                      "properties": {
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "runAfter": {
                    "Get_kycloud-api-token_from_KeyVault": [
                      "Succeeded"
                    ]
                  },
                  "type": "ParseJson"
                },
                "Set-SourceOAUTHKey": {
                  "inputs": {
                    "name": "SourceOAUTHKey",
                    "value": "@body('Parse_kycloud-api-token')?['value']"
                  },
                  "runAfter": {
                    "Parse_kycloud-api-token": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                },
                "Set-SourceOAUTHSecret": {
                  "inputs": {
                    "name": "SourceOAUTHSecret",
                    "value": "@body('Parse_kycloud-api-password')?['value']"
                  },
                  "runAfter": {
                    "Parse_kycloud-api-password": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                },
                "Set-TargetOAUTHCredentials": {
                  "inputs": {
                    "name": "TargetOAUTHCredentials",
                    "value": "@body('Parse_cdc-events-token-request-payload')?['value']"
                  },
                  "runAfter": {
                    "Parse_cdc-events-token-request-payload": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                },
                "Set-TargetOAUTHKey": {
                  "inputs": {
                    "name": "TargetOAUTHKey",
                    "value": "@body('Parse_cdc-events-subscription-key')?['value']"
                  },
                  "runAfter": {
                    "Parse_cdc-events-subscription-key": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                }
              },
              "runAfter": {
                "Init-Control-Attachments": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Report": {
              "actions": {
                "If-Control-Status-Success": {
                  "actions": {},
                  "else": {
                    "actions": {
                      "Terminate": {
                        "inputs": {
                          "runError": {
                            "code": "1",
                            "message": "Termianted after failure"
                          },
                          "runStatus": "Failed"
                        },
                        "runAfter": {},
                        "type": "Terminate"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@variables('Control-Status')",
                          100
                        ]
                      }
                    ]
                  },
                  "runAfter": {},
                  "type": "If"
                }
              },
              "description": "To send notification via email on results of the run.",
              "runAfter": {
                "Scope-Update-Status-Transform": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "type": "Scope"
            },
            "Scope-Source-OAUTH": {
              "actions": {
                "Get-SourceOAUTHToken": {
                  "inputs": {
                    "headers": {
                      "Accept": "application/json"
                    },
                    "method": "POST",
                    "queries": {
                      "ApiToken": "@variables('SourceOAUTHKey')",
                      "Email": "@parameters('SourceOAUTHId')",
                      "Password": "@variables('SourceOAUTHSecret')"
                    },
                    "uri": "@parameters('SourceOAUTHEndpoint')"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "Parse-SourceOAUTHToken": {
                  "inputs": {
                    "content": "@body('Get-SourceOAUTHToken')",
                    "schema": {
                      "properties": {
                        "SessionId": {
                          "type": "string"
                        },
                        "Success": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "runAfter": {
                    "Get-SourceOAUTHToken": [
                      "Succeeded"
                    ]
                  },
                  "type": "ParseJson"
                },
                "Validate-SourceOAUTHToken-Request": {
                  "actions": {
                    "Set-SourceOAUTHToken": {
                      "inputs": {
                        "name": "SourceOAUTHToken",
                        "value": "@body('Parse-SourceOAUTHToken')?['SessionId']"
                      },
                      "runAfter": {},
                      "type": "SetVariable"
                    }
                  },
                  "else": {
                    "actions": {
                      "Scope-Source-Error-Fail-SourceOAUTH": {
                        "description": "Throws an error which deflects to last Scope",
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__FAIL__')"
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Parse-SourceOAUTHToken')?['Success']",
                          true
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Parse-SourceOAUTHToken": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Scope-Update-Status-Source-Login": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Source-OAUTH-Refresh": {
              "actions": {
                "If-Source-OAUTH-Refresh-Success": {
                  "actions": {
                    "If-Parse-Source-OAUTH-Refresh-Token-Success": {
                      "actions": {
                        "Set-SourceOAUTHToken-Again": {
                          "inputs": {
                            "name": "SourceOAUTHToken",
                            "value": "@body('Parse-Source-OAUTH-Refresh')?['SessionId']"
                          },
                          "runAfter": {},
                          "type": "SetVariable"
                        }
                      },
                      "else": {
                        "actions": {
                          "Scope-Source-OAUTH-Refresh-Fail-Parse": {
                            "description": "Throw error because re login parse of data failed",
                            "inputs": {
                              "name": "Control-Error",
                              "value": "@int('__FAIL__')"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse-Source-OAUTH-Refresh')?['Success']",
                              true
                            ]
                          }
                        ]
                      },
                      "runAfter": {
                        "Parse-Source-OAUTH-Refresh": [
                          "Succeeded"
                        ]
                      },
                      "type": "If"
                    },
                    "Parse-Source-OAUTH-Refresh": {
                      "inputs": {
                        "content": "@body('Source-OAUTH-Refresh')",
                        "schema": {
                          "properties": {
                            "SessionId": {
                              "type": "string"
                            },
                            "Success": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "runAfter": {},
                      "type": "ParseJson"
                    }
                  },
                  "else": {
                    "actions": {
                      "Scope-Source-OAUTH-Refresh-Fail-Status": {
                        "description": "Throw and error because the re login failed with bad http status",
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__ERROR__')"
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('Source-OAUTH-Refresh')['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Source-OAUTH-Refresh": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                },
                "Source-OAUTH-Refresh": {
                  "inputs": {
                    "headers": {
                      "Accept": "application/json"
                    },
                    "method": "POST",
                    "queries": {
                      "ApiToken": "@variables('SourceOAUTHKey')",
                      "Email": "@parameters('SourceOAUTHId')",
                      "Password": "@variables('SourceOAUTHSecret')"
                    },
                    "uri": "@parameters('SourceOAUTHEndpoint')"
                  },
                  "runAfter": {},
                  "type": "Http"
                }
              },
              "runAfter": {
                "Scope-Attachments-List": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Start-Status": {
              "actions": {
                "Set-Control-Since": {
                  "description": "Set the Since date and time according to the returned value of the last successful run",
                  "inputs": {
                    "name": "Control-Since",
                    "value": "@{outputs('Start')['headers']?['X-Run-Since']}"
                  },
                  "runAfter": {
                    "Set-Control-Started": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                },
                "Set-Control-Started": {
                  "description": "Set the started date and time using the returned value to get SQL adjusted milliseconds",
                  "inputs": {
                    "name": "Control-Started",
                    "value": "@{outputs('Start')['headers']?['X-Run-Identifier']}"
                  },
                  "runAfter": {
                    "Start": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                },
                "Start": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')"
                    },
                    "method": "POST",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": {},
                  "type": "Http"
                }
              },
              "runAfter": {
                "Scope-Target-OAUTH": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Target-OAUTH": {
              "actions": {
                "Get_CDC_Events_OAuth_Token": {
                  "inputs": {
                    "body": "@variables('TargetOAUTHCredentials')",
                    "headers": {
                      "Content-Type": "application/x-www-form-urlencoded"
                    },
                    "method": "POST",
                    "uri": "@parameters('TargetOAUTHEndpoint')"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "Parse_CDC_Events_OAuth_Token": {
                  "inputs": {
                    "content": "@body('Get_CDC_Events_OAuth_Token')",
                    "schema": {
                      "properties": {
                        "access_token": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "runAfter": {
                    "Get_CDC_Events_OAuth_Token": [
                      "Succeeded"
                    ]
                  },
                  "type": "ParseJson"
                },
                "Set-TargetOAUTHToken": {
                  "inputs": {
                    "name": "TargetOAUTHToken",
                    "value": "@body('Parse_CDC_Events_OAuth_Token')?['access_token']"
                  },
                  "runAfter": {
                    "Parse_CDC_Events_OAuth_Token": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                }
              },
              "runAfter": {
                "Scope-Get-Secrets": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Update-Status-Entities": {
              "actions": {
                "Record-Control-Status-Entities": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')",
                      "X-Run-Status": "@{variables('Control-Status')}"
                    },
                    "method": "PATCH",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": {
                    "Set-Control-Status-Entities": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Set-Control-Status-Entities": {
                  "inputs": {
                    "name": "Control-Status",
                    "value": 8
                  },
                  "runAfter": {},
                  "type": "SetVariable"
                }
              },
              "runAfter": {
                "Scope-Source-OAUTH": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Update-Status-Extract": {
              "actions": {
                "Record-Control-Status-Extract": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')",
                      "X-Run-Status": "@{variables('Control-Status')}"
                    },
                    "method": "PUT",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": {
                    "Set-Control-Status-Extract": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Set-Control-Status-Extract": {
                  "inputs": {
                    "name": "Control-Status",
                    "value": 32
                  },
                  "runAfter": {},
                  "type": "SetVariable"
                }
              },
              "runAfter": {
                "Scope-Entities": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Update-Status-Preparing": {
              "actions": {
                "Record-Control-Status-Preparing": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')",
                      "X-Run-Status": "@{variables('Control-Status')}"
                    },
                    "method": "PATCH",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": {
                    "Set-Control-Status-Preparing": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Set-Control-Status-Preparing": {
                  "inputs": {
                    "name": "Control-Status",
                    "value": 2
                  },
                  "runAfter": {},
                  "type": "SetVariable"
                }
              },
              "runAfter": {
                "Scope-Start-Status": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Update-Status-Source-Login": {
              "actions": {
                "Record-Control-Status-Source-Login": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')",
                      "X-Run-Status": "@{variables('Control-Status')}"
                    },
                    "method": "PATCH",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": {
                    "Set-Control-Status-Source-Login": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Set-Control-Status-Source-Login": {
                  "inputs": {
                    "name": "Control-Status",
                    "value": 4
                  },
                  "runAfter": {},
                  "type": "SetVariable"
                }
              },
              "runAfter": {
                "Scope-Update-Status-Preparing": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Scope-Update-Status-Transform": {
              "actions": {
                "Condition": {
                  "actions": {},
                  "else": {
                    "actions": {
                      "Scope-Update-Status-Transform-Fail": {
                        "inputs": {
                          "name": "Control-Error",
                          "value": "@int('__ERROR__')"
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('Record-Control-Status-Transform')['statusCode']",
                          202
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Record-Control-Status-Transform": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                },
                "Record-Control-Status-Transform": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{variables('TargetOAUTHToken')}",
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "@variables('TargetOAUTHKey')",
                      "X-Run-Identifier": "@variables('Control-Started')",
                      "X-Run-Status": "@{variables('Control-Status')}"
                    },
                    "method": "PUT",
                    "uri": "@parameters('TargetControlEndpoint')"
                  },
                  "runAfter": {
                    "Set-Control-Status-Transform": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Set-Control-Status-Report-Success": {
                  "inputs": {
                    "name": "Control-Status",
                    "value": 100
                  },
                  "runAfter": {
                    "Condition": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                },
                "Set-Control-Status-Transform": {
                  "inputs": {
                    "name": "Control-Status",
                    "value": 64
                  },
                  "runAfter": {},
                  "type": "SetVariable"
                }
              },
              "description": "Complete the run and trigger the transformation of the changes",
              "runAfter": {
                "Scope-Attachments": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            }
          },
          "contentVersion": "1.0.0.0",
          "parameters": {
            "SecretsAudience": {
              "defaultValue": "https://vault.azure.net",
              "type": "String"
            },
            "SourceEndpoint": {
              "defaultValue": "https://uatcdc2.kykloud.com/api/data/",
              "type": "String"
            },
            "SourceEntities": {
              "defaultValue": [
                "users",
                "portfolios",
                "sites",
                "surveys",
                "surveysections",
                "surveysectionelements",
                "deleted"
              ],
              "type": "Array"
            },
            "SourceOAUTHEndpoint": {
              "defaultValue": "https://uatcdc2.kykloud.com/api/user/login",
              "type": "String"
            },
            "SourceOAUTHId": {
              "defaultValue": "eapim.support@education.gov.uk",
              "type": "String"
            },
            "SourceOAUTHKeyUri": {
              "defaultValue": "https://s153d01-kv-01.vault.azure.net/secrets/kycloud-api-token/e2bac005ae6a4486827dfebdabadb7d8?api-version=2016-10-01",
              "type": "String"
            },
            "SourceOAUTHSecretUri": {
              "defaultValue": "https://s153d01-kv-01.vault.azure.net/secrets/kycloud-api-password/fbecc50e32e243379e76941dc37085b7?api-version=2016-10-01",
              "type": "String"
            },
            "TargetControlEndpoint": {
              "defaultValue": "https://dev-api-customerengagement.platform.education.gov.uk/v1/cdc-events/load",
              "type": "String"
            },
            "TargetEndpoint": {
              "defaultValue": "https://dev-api-customerengagement.platform.education.gov.uk/v1/cdc-events/",
              "type": "String"
            },
            "TargetOAUTHCredentialsUri": {
              "defaultValue": "https://s153d01-kv-01.vault.azure.net/secrets/cdc-events-token-request-payload/d53b247212ea4367961ec3ebecbc98ee?api-version=2016-10-01",
              "type": "String"
            },
            "TargetOAUTHEndpoint": {
              "defaultValue": "https://login.microsoftonline.com/9c7d9dd3-840c-4b3f-818e-552865082e16/oauth2/token",
              "type": "String"
            },
            "TargetOAUTHKeyUri": {
              "defaultValue": "https://s153d01-kv-01.vault.azure.net/secrets/cdc-events-subscription-key/9fd022fecaac4ff2a7c3c6adb980a428?api-version=2016-10-01",
              "type": "String"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Day",
                "interval": 1,
                "schedule": {
                  "hours": [
                    "0"
                  ]
                }
              },
              "type": "Recurrence"
            }
          }
        },
        "parameters": {}
      }
    }
  ],
  "outputs": {
    "logicAppPrincipalId": {
      "value": "[reference(variables('logicAppId'), '2019-05-01', 'Full').identity.principalId]",
      "type": "string"
    }
  },
  "contentVersion": "1.0.0.0"
}